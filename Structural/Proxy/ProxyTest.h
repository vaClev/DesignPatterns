#pragma once
/*
Шаблон Proxy (второе название Surrogate Pattern) —  предоставляет земместтителя или заполнителя для другого объекта, позволяя вам контролировать доступ к нему.
Этот шаблон может быть особенно полезен в ситуациях, когда вам нужно добавить дополнительный уровень управления, 
lazy loadding или удаленный доступ к объектам.
*/
/*
Компоненты прокси-шаблона
Представьте, что у вас есть друг, который является экспертом в решении головоломок,
но вы не хотите беспокоить его все время. Вы хотели бы, чтобы кто-то помог вам получить доступ 
к его навыкам решения головоломок, когда это необходимо.

Subject: Способность вашего друга решать головоломки похожа на Тему. 
Это основная вещь, которую вы хотите использовать, а именно решение головоломок.

Real Object: В этом случае Реальным Объектом является ваш друг. Они могут решать головоломки очень хорошо,
но может потребоваться некоторое время и усилия, чтобы задействовать их каждый раз, когда вам нужна помощь.

Proxy: Теперь давайте представим Прокси. В этом сценарии прокси может быть ваш другой друг,
который выступает в качестве посредника. Когда вам нужно решить головоломку, вы говорите с этим другом-прокси. 
Друг-прокси решает, достаточно ли проста головоломка, чтобы справиться с ней самостоятельно. 
Если это сложная головоломка, они попросят вашего друга-эксперта по решению головоломок о помощи.


упрощенно: Proxy Pattern — это как иметь посредника (посредника), который решает, когда обратиться за помощью к настоящему эксперту (реальному объекту),
а когда справиться с вещами самостоятельно. 
Способ управлять и контролировать доступ к чьим-либо навыкам, не беспокоя их без необходимости.
*/
#include "ImageProxy.h"
#include "Image.h"
class ProxyTest
{
public: 
	static void test() {
		Image* image = new ImageProxy("exemple.jpg");

		// Показ изображения ( Proxy  загрузит  RealObject при необходимости)
		image->display();

		// Повторный показ изображения (Proxy не нужно вновь создавать RealObject -- он уже вернет бытро результат)
		image->display();

		delete image; // Clean up
	}
};