#pragma once
/* Bridge используется для отделения абстракции объекта от его реализации.
особенно полезен, когда нам нужно избежать постоянной привязки между абстракцией и ее реализацией.*/

/*Предположим, что мы хотим создать программу для рисования, в которой есть разные формы (например, круги и квадраты)
и разные методы рендеринга (например, вектор и растр). 
Шаблон Bridge может помочь нам отделить формы (абстракцию) от методов рендеринга (реализации).*/
#include "Renderer.h" 
#include "ConcreteShapes.h"
#include "ShapesAbstraction.h"

namespace Bridge {
    static void test() {
        VectorRenderer vectorRenderer;
        RasterRenderer rasterRenderer;

        Circle circle(vectorRenderer);
        Square square(rasterRenderer);

        circle.draw();  // Output: Drawing a circle Rendering as a vector
        square.draw();  // Output: Drawing a square Rendering as a raster
    }
}
/*
* Ключевые компоненты паттерна Bridge
    Абстракция Abstractions: это высокоуровневая часть системы или кода, которая определяет интерфейс для клиентского кода. 
    По сути, она содержит ссылку на объект реализации, но не реализует само поведение. 
    Абстракция определяет методы и свойства, которые может использовать клиентский код.

    Усовершенствованная абстракция: Это конкретные классы, которые расширяют абстракцию и предоставляют конкретные реализации высокоуровневого интерфейса.
    Усовершенствованные абстракции — это то, с чем взаимодействует клиентский код.

    Implementation: это низкоуровневая часть системы или кода, которая определяет интерфейс для реализации определенной функциональности. 
    Реализация отделена от абстракции и может разрабатываться независимо. Она может иметь несколько реализаций, каждая из которых может 
    использоваться различными уточненными абстракциями.

    Concrete Implementation: Это в основном конкретные классы, которые реализуют интерфейс низкого уровня.
    Каждая конкретная реализация обеспечивает определенный способ выполнения базовой функциональности.
    Может быть несколько конкретных реализаций для разных платформ, баз данных или технологий.
*/

/*
В приведенном выше примере:

Abstractions: « Shape » — это абстракция, представляющая собой различные фигуры, которые можно нарисовать.
Implementations: « Renderer » — это реализация, представляющая различные методы рендеринга.

Concrete Abstraction: «Circle» и « Square» — это конкретные абстракции, и они ссылаются на объект «Renderer» ,
            что позволяет рисовать форму, используя различные методы рендеринга.
*/