#pragma once
/*
Composite pattern - "компоновщик"  является одним из наиболее широко используемых шаблонов в отрасли 
и решает очень важную и тонкую проблему. 
Он используется всякий раз, когда пользователь хочет обращаться с отдельным объектом так же, как с коллекцией этих отдельных объектов, 

компоновщик - это структурный паттерн проектирования, который позволяет сгруппировать множество объектов в древовидную структуру,
а затем работать с ней так, как будто это единичный объект.


например, вы можете захотеть рассматривать страницу из копии как всю копию,
которая по сути является коллекцией страниц, 
или если вы хотите создать иерархию чего-либо, где вы можете захотеть рассматривать все это как объект.

*/

/*
В случае с Photoshop, где мы рисуем множество отдельных объектов, а затем эти объекты составляют целый уникальный объект,
вам может понадобиться применить некоторую операцию ко всему объекту, а не к каждому отдельному объекту.
*/
#include "Page.h"
#include "Copy.h"
class CompositeTest {
public:
    void test()
    {
        Page aPage;
        Page bPage;
        Copy vkladki;
        vkladki.AddElement(aPage);
        vkladki.AddElement(bPage);

        vkladki.Add(aPage);
        aPage.Add(bPage);

        vkladki.Remove();
        bPage.Remove();
    }
};
/*
    Copy содержит в себе Page. (массив Page)
    при этом и Page и Copy  реализуют одинаковый итерфейс PageObject.  -- поэтому содержат в себе одинаковые публичные методы add - remove - delete.

    Это дает возможность работать с листьями  древа - теме же способами как и с родителями - и с корнем. 
    (Паттерн важен там где есть иерархия вложенности)
   
*/

/*
Самый яркий пример составного шаблона — любой набор инструментов UI. 
Рассмотрим набор элементов UI, где каждый элемент UI верхнего уровня состоит из множества меньших независимых элементов UI нижнего уровня,
и оба элемента UI верхнего и нижнего уровня реагируют на одни и те же события и действия.
*/