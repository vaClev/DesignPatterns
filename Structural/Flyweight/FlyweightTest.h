#pragma once
/*
Шаблон Flyweight — это структурный шаблон проектирования, используемый для оптимизации использования памяти 
и производительности при работе с большим количеством объектов, имеющих некоторые общие характеристики.

путем разделения внутреннего состояния объекта (общего для нескольких объектов) 
от его внешнего состояния (уникального для каждого объекта)

Внутреннее состояние хранится внешне, обычно в фабрике Flyweight, а внешнее состояние предоставляется клиентским кодом при необходимости.
*/

/*
Ключевые компоненты
Flyweight Interface или базовый класс : определяет методы доступа и управления внутренним состоянием.
Concrete Flyweight : Реализации интерфейса Flyweight, которые хранят и управляют внутренним состоянием. Они обычно легкие и могут быть общими.
Flyweight Factory : класс фабрики, отвечающий за создание и управление объектами-приспособленцами. Он обеспечивает совместное использование и повторное использование при возможности объектов-приспособленцев.

*/

/*
Пример
Рассмотрим текстовый редактор, в котором каждый символ в документе представлен как объект.
Если у вас большой документ, создание отдельных объектов для каждого символа может потребовать большого объема памяти. 
Однако большинство символов имеют общие свойства, такие как шрифт и размер,
которые можно оптимизировать для снижения использования памяти.
*/
#include "CharacterFactory.h"
class FlyweightTest {
public: 
	static void test() {
        CharacterFactory characterFactory;

        // Extrinsic state
        int position = 0;

        // Drawing characters 'A', 'B', 'C' at different positions
        characterFactory.getCharacter('A')->draw(position++);
        characterFactory.getCharacter('B')->draw(position++);
        characterFactory.getCharacter('C')->draw(position++);
	}
};

/*
Преимущества шаблона Flyweight в шаблонах проектирования C++
Вот преимущества шаблона Flyweight в C++:

Эффективность памяти: Основное преимущество шаблона Flyweight заключается в его способности значительно сокращать потребление памяти.
Благодаря совместному использованию общего внутреннего состояния несколькими объектами он избегает хранения избыточных данных, 
что особенно ценно при работе с большим количеством похожих объектов.

Улучшение производительности : Сокращение использования памяти часто приводит к повышению производительности.
Меньшее количество выделений и освобождений памяти может привести к более быстрому созданию объектов и меньшим накладным расходам,
что делает приложение более эффективным.

Повторное использование объектов : Объекты-приспособленцы предназначены для повторного использования. 
Вместо создания нового объекта для каждого экземпляра, шаблон поощряет повторное использование существующих объектов с тем же внутренним состоянием.
Это способствует эффективному управлению памятью и ресурсами.

Масштабируемость : Шаблон Flyweight хорошо подходит для приложений, которым необходимо эффективное масштабирование, особенно в ситуациях, когда требуется большое количество объектов. Он помогает сохранять использование памяти предсказуемым и управляемым по мере роста приложения.
Упрощенный дизайн : разделяя внутреннее состояние от внешнего и используя общие приспособленцы, дизайн приложения становится проще и модульнее. Он способствует чистому разделению задач и поддерживает четкое различие между общими и уникальными данными.
Сокращение накладных расходов на объекты : создание и управление большим количеством объектов может привести к накладным расходам с точки зрения использования памяти и ЦП. Благодаря общему состоянию шаблон снижает эти накладные расходы, что приводит к более оптимизированному и отзывчивому приложению.
Улучшенное обслуживание : Объекты-приспособленцы обычно легкие и самодостаточные. Это упрощает поддержку и понимание кодовой базы, поскольку вам приходится управлять меньшим количеством классов и объектов, особенно при работе с множеством похожих сущностей.
Согласованность : поскольку общее внутреннее состояние централизовано в объектах-приспособленцах, оно обеспечивает согласованность в приложении. Изменения внутреннего состояния отражаются во всех объектах, которые разделяют это состояние, что способствует целостности данных.
Управление ресурсами : в ресурсоемких приложениях (например, для рендеринга графики или игр) шаблон Flyweight может помочь эффективно управлять ресурсами, такими как текстуры, шрифты или сетки, путем их совместного использования несколькими экземплярами.
Настройка : В то время как внутреннее состояние является общим, внешнее состояние все еще может быть настроено для каждого объекта. Это позволяет вам иметь индивидуальность и уникальность там, где это необходимо, оптимизируя использование памяти для общих свойств.
Недостатки шаблона «Приспособленец» в шаблонах проектирования C++




Вот некоторые потенциальные недостатки использования шаблона Flyweight в C++:

Сложность : Реализация шаблона Flyweight может привести к дополнительной сложности вашей кодовой базы,
особенно при управлении разделением внутренних и внешних состояний. 
Эта сложность может сделать код более трудным для понимания разработчиками, которые не знакомы с шаблоном.

Увеличенная кодовая база : шаблон может потребовать создания нескольких классов и интерфейсов, 
включая интерфейс Flyweight, Concrete Flyweight и Flyweight Factory.
Это может привести к увеличению кодовой базы, что может оказаться излишним для более простых приложений.

Накладные расходы на производительность : в некоторых случаях логика поиска и создания Flyweight Factory может вносить небольшие накладные расходы на производительность.
Хотя обычно это незначительно, это может быть проблемой в приложениях, критических к производительности.

Поддержание внешнего состояния : Управление внешним состоянием (уникальным состоянием) объектов-приспособленцев может быть сложным.
Разработчикам необходимо убедиться, что внешнее состояние правильно назначено экземплярам-приспособленцам, что может быть подвержено ошибкам.
Ограниченная применимость : Шаблон Flyweight наиболее полезен, когда имеется значительное количество общего внутреннего состояния. В ситуациях, когда объекты имеют мало или вообще не имеют общего состояния, реализация шаблона может не дать заметных преимуществ и может добавить ненужную сложность.
Безопасность потоков : Обеспечение безопасности потоков при работе с общими приспособленцами может быть сложной задачей, особенно в многопоточных приложениях. Разработчикам необходимо тщательно продумать механизмы синхронизации, чтобы предотвратить состояния гонки.
Негибкость : Шаблон Flyweight может привести к негибкости в некоторых случаях. Например, если вам нужно изменить внутреннее состояние определенного экземпляра, не затрагивая другие, шаблон может не подойти.
Сложная инициализация : в зависимости от сложности внутреннего состояния и того, как оно распределяется, инициализация объектов-приспособленцев и поддержание их состояния могут быть сложными, что может привести к проблемам, связанным с инициализацией.
Отладка : Отладка приложений, использующих шаблон Flyweight, может быть более сложной, поскольку несколько объектов могут иметь одно и то же внутреннее состояние. Определение того, какой экземпляр вызывает конкретную проблему, может потребовать дополнительных усилий.
Накладные расходы для небольших коллекций : в сценариях, где у вас небольшая коллекция объектов или где большинство объектов имеют уникальные внутренние состояния, накладные расходы, возникающие при реализации шаблона «Приспособленец», могут быть неоправданными.

*/