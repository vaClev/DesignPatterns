#pragma once
#include "DesktopComputerBuilder.h"
#include "ComputerAssembler.h"
/*Логика шаблона Builder заключается в том, чтобы отделить построение объекта от его представлений. 
Такое разделение в основном позволяет нам создавать разные представления объекта, используя один и тот же процесс построения.*/

namespace BuilderPattern {
	static void BuilderPatternTest()
	{
		DesktopComputerBuilder desktopBuilder;
		ComputerAssembler assembler;

		Computer desktop = assembler.assembleComputer(desktopBuilder); //объект создает DIRECTOR --- из указанного ему BUILDER 

		std::cout << "Desktop Computer Configuration:" << std::endl;
		desktop.display();
	}
}
/*в этом примере у нас есть все четыре компонента шаблона Builder:
	Класс продукта  Computer
	Интерфейс buildera
	Конкретный Builder
	Директор* ComputerAssembler */

/*
Преимущества шаблонов Builder в C ++
	Создание сложных объектов: Это упрощает создание сложных объектов, разбивая процесс построения на серию четко определенных шагов. Каждый шаг фокусируется на определенном аспекте конфигурации объекта.
	Возможность повторного использования: builder'ы можно использовать повторно для создания похожих объектов с различными конфигурациями. Возможность повторного использования может привести к созданию более эффективного и поддерживаемого кода.
	Проверка параметров: builder'ы могут проверять параметры в процессе построения, гарантируя, что для создания объектов используются только допустимые конфигурации.

Недостатки шаблонов Builder в C ++
	Накладные расходы на код: Реализация шаблона Builder может потребовать написания дополнительного кода для классов builder, что может усложнить кодовую базу, особенно для простых объектов.
	Процесс обучения: Разработчикам, которые не знакомы с шаблоном Builder, может потребоваться некоторое время, чтобы понять его концепцию и как ее правильно реализовать.
	Вероятность неполных объектов: Если клиентский код забывает вызвать определенные методы конструктора, возможно создание неполных или несовместимых объектов, что приводит к ошибкам во время выполнения.

*/