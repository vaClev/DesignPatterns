#pragma once
/*Шаблон адаптера это структурный шаблон проектирования, используемый для обеспечения совместной работы двух несовместимых интерфейсов. 
Он действует как мост между двумя несовместимыми интерфейсами, позволяя им взаимодействовать без изменения исходного кода.
Этот шаблон особенно полезен при интеграции устаревшего кода или библиотек сторонних производителей в ваше приложение.*/

/*Задача : Предположим, у вас есть устаревший класс принтера, который понимает команды только в верхнем регистре,
и современный компьютерный класс, который отправляет команды в нижнем регистре. 
Вам нужно заставить современный компьютер работать с устаревшим принтером без изменения существующего класса принтера.*/

/* Паттерн помогает двум классам общаться с помощью третьего класса:
1 LegacyPrinter является устаревшим компонентом (Adaptee). У него есть метод printInUppercase который может печатать текст в верхнем регистре.

2 ModernComputer это современный клиентский класс. У него есть метод sendCommand для отправки команд, но он отправляет их в нижнем регистре.

3 PrinterAdapter это класс адаптера. Он инкапсулирует LegacyPrinter и адаптирует его для работы с ModernComputer.*/

#include "PrinterAdapter.h"
#include "ModernComputer.h"
class AdapterTest {
public :
	static void test() {
		ModernComputer computer;
		PrinterAdapter adapter;

		computer.sendCommand("Print this in lowercase");
		adapter.sendCommand("Print this in lowercase (adapted)");
	}
};
/*
Target interface: Это интерфейс, который ожидает ваш клиентский код. Он определяет операции или методы, которые должен использовать клиентский код.
Адаптируемый Adaptee: Это существующий класс или компонент с интерфейсом, несовместимым с целевым интерфейсом.
Adaptee - это класс, который вы хотите адаптировать, чтобы сделать его совместимым с ожиданиями клиента.

Adapter: Класс адаптера отвечает за адаптацию Интерфейса адаптируемогопереход к Целевому интерфейсу.
Он действует как оболочка вокруг адаптируемого, перенаправляя вызовы к методам адаптируемого, но таким образом,
который совместим с ожиданиями клиента.
*/

/*
Преимущества шаблона адаптера:
	Совместимость: Позволяет интегрировать новые и старые системы или компоненты с разными интерфейсами.
	Возможность повторного использования: Существующие классы можно использовать повторно без изменений, что снижает риск появления ошибок.
	Гибкость: Можно легко добавлять новые адаптеры для адаптации различных классов к общему интерфейсу.
	Ремонтопригодность: Изолирует изменения в адаптере, упрощая обслуживание и обновление систем.

Недостатки шаблона адаптера:
	Сложность: Внедрение адаптеров может усложнить кодовую базу, особенно при использовании нескольких адаптеров.
	Издержки производительности: Адаптеры могут приводить к некоторым издержкам производительности из-за дополнительных вызовов методов и косвенного обращения.
	Возможность путаницы при проектировании: чрезмерное использование шаблона адаптера может сделать кодовую базу менее интуитивно понятной и более трудной для понимания.
	Не всегда подходит: некоторые классы могут слишком отличаться, чтобы их можно было легко адаптировать, что делает шаблон адаптера непрактичным в определенных ситуациях.
*/